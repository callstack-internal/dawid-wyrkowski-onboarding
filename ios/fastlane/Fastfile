GIT_AUTHORIZATION = ENV["GIT_AUTHORIZATION"]
KEY_ID = ENV["APP_STORE_CONNECT_API_KEY_KEY_ID"]
ISSUER_ID = ENV["APP_STORE_CONNECT_API_KEY_ISSUER_ID"]
KEY_CONTENT = ENV["APP_STORE_CONNECT_API_KEY_KEY"]
APP_IDENTIFIER = ENV["APPLE_APP_IDENTIFIER"]

default_platform(:ios)

platform :ios do
  desc "Get certificates, you can get certificates on machine by executing this command"
  lane :certificates do
    sync_code_signing(
      type: "appstore",
      app_identifier: APP_IDENTIFIER,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      force_for_new_devices: true,
      readonly: true
    )
    # you can repeat command for other types of certificates like adhoc or development
  end

  desc "Generate new certificates"
  lane :generate_new_certificates do
    sync_code_signing(
      type: "appstore",
      app_identifier: APP_IDENTIFIER,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      force_for_new_devices: true,
      readonly: false
    )
    # You can repeate the sync_code_signing with other types of certificates such as development and adhoc
  end

  desc "deploy"
  lane :deploy do
    setup_ci
    api_key = app_store_connect_api_key(
      key_id: KEY_ID,
      issuer_id: ISSUER_ID,
      key_content: KEY_CONTENT,
      is_key_content_base64: true
    )
    build_num = app_store_build_number(
      live: false,
      api_key: api_key,
      app_identifier: APP_IDENTIFIER
    )

    increment_build_number(xcodeproj: "CkOnboardinApp.xcodeproj", build_number: build_num + 1)

    sync_code_signing(
      type: "appstore",
      app_identifier: APP_IDENTIFIER,
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      force_for_new_devices: true,
      readonly: true
    )

    build_app(scheme: "CkOnboardinApp")
    app_store_connect_api_key(
      is_key_content_base64: true,
      in_house: false,
    )
    upload_to_testflight()
  end
end
